from datasets.mpii import MPII
import utility
import os
import numpy as np
import matplotlib.pyplot as plt

from metrics import PCKh
from models.deeppose import Deeppose
import torch

mpii = MPII(split='val')

train_losses_21 = [0.2122800201177597, 0.2500612437725067, 0.2507743537425995, 0.2506287395954132,
                   0.2510949671268463, 0.25099822878837585, 0.25084826350212097, 0.2511116564273834,
                   0.25073912739753723, 0.25126466155052185, 0.2509758770465851, 0.2509631812572479,
                   0.25092968344688416, 0.25095945596694946, 0.2514154016971588, 0.2511085271835327,
                   0.2509385645389557, 0.2510857880115509, 0.2513560354709625, 0.25088366866111755,
                   0.25140026211738586, 0.2509326636791229, 0.25110873579978943, 0.2510554790496826,
                   0.2510307729244232, 0.251415491104126, 0.25135383009910583, 0.25081637501716614,
                   0.25137922167778015, 0.25106504559516907, 0.25110769271850586, 0.2512378990650177,
                   0.2509954273700714, 0.251181036233902, 0.25108152627944946, 0.2512914836406708,
                   0.25137004256248474, 0.250963032245636, 0.25118449330329895, 0.25154414772987366]
val_losses_21 = [0.24582533538341522, 0.24590711295604706, 0.2458154261112213, 0.2458903044462204,
                 0.24581407010555267, 0.24582785367965698, 0.2458028346300125, 0.24586038291454315,
                 0.2458566576242447, 0.24585777521133423]

train_losses_22 = [0.03280908241868019, 0.0315992534160614, 0.21284279227256775, 0.2464970052242279,
                   0.24623118340969086, 0.24605658650398254, 0.24635404348373413, 0.24622897803783417,
                   0.24644367396831512, 0.24602670967578888, 0.2464345246553421, 0.24642907083034515,
                   0.24666374921798706, 0.2460586279630661, 0.24668259918689728, 0.24630773067474365,
                   0.24598832428455353, 0.24644547700881958, 0.246395081281662, 0.24598701298236847,
                   0.24628877639770508, 0.24652738869190216, 0.2467978298664093, 0.24620383977890015,
                   0.24613812565803528, 0.24718551337718964, 0.2459142655134201, 0.246717169880867,
                   0.24637766182422638, 0.24618186056613922, 0.24670039117336273, 0.24613629281520844,
                   0.24684253334999084, 0.24641986191272736, 0.24625521898269653, 0.24675250053405762,
                   0.24630218744277954, 0.24682295322418213, 0.24667291343212128, 0.24715396761894226]
val_losses_22 = [0.2363652139902115, 0.23639394342899323, 0.23743565380573273, 0.24022628366947174,
                 0.2403898537158966, 0.24032552540302277, 0.24030229449272156, 0.2403784841299057,
                 0.24046054482460022, 0.24029606580734253]

train_losses_23 = [0.02966143935918808, 0.02733425423502922, 0.026682671159505844, 0.026221677660942078,
                   0.02604043483734131, 0.026170894503593445, 0.025935322046279907, 0.025932904332876205,
                   0.025841668248176575, 0.02574356086552143, 0.02597006782889366, 0.025823796167969704,
                   0.02597101405262947, 0.025882026180624962, 0.025990677997469902, 0.0258382186293602,
                   0.025882592424750328, 0.025825344026088715, 0.025824805721640587, 0.02569831907749176,
                   0.025718893855810165, 0.025727245956659317, 0.025718847289681435, 0.025686757639050484,
                   0.025625135749578476, 0.025701934471726418, 0.025623155757784843, 0.0257581640034914,
                   0.025755617767572403, 0.025633804500102997, 0.025756703689694405, 0.0256910752505064,
                   0.025637153536081314, 0.025588098913431168, 0.025666536763310432, 0.025775952264666557,
                   0.025866210460662842, 0.025890812277793884, 0.025866422802209854, 0.0260821171104908]
val_losses_23 = [0.02323281392455101, 0.02200709655880928, 0.023020656779408455, 0.022461477667093277,
                 0.0223973598331213, 0.021894987672567368, 0.022449862211942673, 0.022173911333084106,
                 0.022755112498998642, 0.022676484659314156]

train_losses_24 = [0.02863437868654728, 0.026992345228791237, 0.026929063722491264, 0.02661212533712387,
                   0.02636440470814705, 0.02604428492486477, 0.025913193821907043, 0.02584405615925789,
                   0.025945261120796204, 0.025844259187579155, 0.02585647441446781, 0.025812281295657158,
                   0.025906529277563095, 0.02589295618236065, 0.025895919650793076, 0.025847166776657104,
                   0.025870690122246742, 0.02584761753678322, 0.025864705443382263, 0.025865791365504265,
                   0.025932561606168747, 0.02591751515865326, 0.025783684104681015, 0.02590923383831978,
                   0.025785671547055244, 0.02585741877555847, 0.02582925744354725, 0.025719229131937027,
                   0.025689532980322838, 0.02578936330974102, 0.025884879752993584, 0.02597883902490139,
                   0.025829728692770004, 0.025889430195093155, 0.02591230720281601, 0.02601458877325058,
                   0.025977974757552147, 0.025891918689012527, 0.02599819377064705, 0.02588062360882759]
val_losses_24 = [0.024351516738533974, 0.022863760590553284, 0.022922029718756676, 0.022330375388264656,
                 0.022473422810435295, 0.02212652936577797, 0.022139014676213264, 0.022712716832756996,
                 0.022860674187541008, 0.022433815523982048]


train_losses_30 = [0.03105863742530346, 0.025638224557042122, 0.025056328624486923, 0.024975527077913284,
                   0.02461938001215458, 0.024294083938002586, 0.024003343656659126, 0.02381061017513275,
                   0.02347157895565033, 0.02332351543009281, 0.023313414305448532, 0.023061132058501244,
                   0.022814009338617325, 0.02245195209980011, 0.022258426994085312, 0.0221574604511261,
                   0.022052764892578125, 0.02183806151151657, 0.021730057895183563, 0.02162080630660057,
                   0.02149004489183426, 0.021509332582354546, 0.02145996131002903, 0.021338459104299545,
                   0.021292343735694885, 0.021141501143574715, 0.020948302000761032, 0.020970696583390236,
                   0.020949766039848328, 0.020840110257267952, 0.02082715928554535, 0.020705368369817734,
                   0.02065795473754406, 0.02058028057217598, 0.02056685835123062, 0.020447151735424995,
                   0.02039177156984806, 0.02035987190902233, 0.020304199308156967, 0.020285824313759804]
val_losses_30 = [0.02143227495253086, 0.020619070157408714, 0.020675543695688248, 0.019443435594439507,
                 0.019267011433839798, 0.019020674750208855, 0.018884411081671715, 0.01866503618657589,
                 0.018432512879371643, 0.018569132313132286]

train_losses_31 = [0.04270274192094803, 0.03447828069329262, 0.0318281464278698, 0.030261913314461708, 0.02900196611881256, 0.027841804549098015, 0.026996716856956482, 0.026522135362029076, 0.02624611370265484, 0.026053881272673607, 0.025829315185546875, 0.025633808225393295, 0.02545166015625, 0.02528178133070469, 0.025199823081493378, 0.025120608508586884, 0.025035174563527107, 0.02485734224319458, 0.02477688156068325, 0.02471816912293434,
                   0.02466394007205963, 0.02466920018196106, 0.024605829268693924, 0.024548254907131195, 0.024401260539889336, 0.024378225207328796, 0.024330930784344673, 0.024304566904902458, 0.02422354556620121, 0.024214699864387512, 0.024199992418289185, 0.02410299889743328, 0.02400442399084568, 0.023973386734724045, 0.023844944313168526, 0.023830724880099297, 0.02371327020227909, 0.02369944378733635, 0.023679396137595177, 0.023575617000460625]
val_losses_31 = [0.025009935721755028, 0.02245303802192211, 0.02176947146654129, 0.021653058007359505, 0.021353334188461304,
                 0.021007776260375977, 0.020817389711737633, 0.02078673243522644, 0.02071465365588665, 0.02070138230919838]

train_losses_32 = [0.05190981924533844, 0.04879485443234444, 0.04667217656970024, 0.04476582258939743, 0.04317297413945198, 0.04177463427186012, 0.040636301040649414, 0.039798442274332047, 0.03887154161930084, 0.038210928440093994, 0.037611644715070724, 0.03699323534965515, 0.03643588721752167, 0.036071863025426865, 0.03558282554149628, 0.03517534211277962, 0.03500783443450928, 0.03448756784200668, 0.03437575697898865, 0.034040022641420364,
                   0.03380011022090912, 0.0335807166993618, 0.0332639142870903, 0.033137209713459015, 0.03286135569214821, 0.03275470808148384, 0.03259950131177902, 0.03238368034362793, 0.03220762312412262, 0.03200429305434227, 0.031853046268224716, 0.031708911061286926, 0.03160611540079117, 0.03154052421450615, 0.03131195902824402, 0.031309548765420914, 0.031245309859514236, 0.03081391006708145, 0.030942169949412346, 0.03083222545683384]
val_losses_32 = [0.0360921286046505, 0.03305913135409355, 0.031195860356092453, 0.03004966676235199, 0.02921454608440399,
                 0.028429830446839333, 0.027702486142516136, 0.02706688642501831, 0.026501024141907692, 0.026013851165771484]


def draw_train_losses():
    print("drawint train_losses ... ...")
    # run 21, 22 did not work at all
    # plt.plot(train_losses_21, label="train_losses_21")
    # plt.plot(train_losses_22, label="train_losses_22")
    plt.plot(train_losses_23, label="train_losses_23")
    plt.plot(train_losses_24, label="train_losses_24")
    plt.plot(train_losses_30, label="train_losses_30")
    plt.plot(train_losses_31, label="train_losses_31")
    plt.plot(train_losses_32, label="train_losses_32")
    plt.legend()
    # plt.show()
    plt.savefig("output_images/train_losses.jpg")


def draw_val_losses():
    print("drawing val_losses ... ...")
    # plt.plot(val_losses_21, label="val_losses_21")
    # plt.plot(val_losses_22, label="val_losses_22")
    plt.plot(val_losses_23, label="val_losses_23")
    plt.plot(val_losses_24, label="val_losses_24")
    plt.plot(val_losses_30, label="val_losses_30")
    plt.plot(val_losses_31, label="val_losses_31")
    plt.plot(val_losses_32, label="val_losses_32")
    plt.legend()
    # plt.show()
    plt.savefig("output_images/val_losses.jpg")



def draw_train_img_with_converted_points():
    print("drawing some computed images for training with converted points ... ...")
    # draws computed image with converted points
    img_list = []
    pt_list = []
    for i in range(15):
        _, target, _, _, img = mpii.__getitem__(i)
        img_list.append(img)
        pt_list.append(target)

    mpii.plot_back_images(img_list, pt_list, cols=3)


def draw_raw_img_with_raw_points():
    print("drawing raw img with raw points ... ...")
    # draws raw image with raw points without any conversion
    # raw_img, raw_pts = mpii.get_raw(0)
    # print(raw_pts.shape)
    # print(raw_pts)
    # print(raw_pts.reshape(-1))
    img_list = []
    pt_list = []
    for i in range(15):
        raw_img, raw_pts = mpii.get_raw(i)
        img_list.append(raw_img)
        pt_list.append(raw_pts)

    utility.plot_image_with_points(img_list, pt_list, cols=3)


def main():
    # draw_train_losses()
    # draw_val_losses()
    # draw_train_img_with_converted_points()
    # draw_raw_img_with_raw_points()
    draw_prediction_vs_target()


def draw_prediction_vs_target():
    pckh = PCKh()

    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    model = Deeppose()
    model.to(device)
        
    path = "output_models/best_model_{}.pth".format(30)
    model.load_state_dict(torch.load(path))
    model.eval()
    img_list = []
    pt_list = []
    out_pt_list = []
    with torch.no_grad():
        # using per sample image
        for i in range(15):
            print("executing: {} ... ...".format(i))
            inp, target, meta1, meta2, img = mpii.__getitem__(i)
            # print(inp.shape, target.shape, meta1.shape, meta2.shape)
            # raw_img, raw_pts = mpii.get_raw(0)
            # print(raw_img.shape, raw_pts)

            inp = inp.unsqueeze(0).to(device)
            target = target.unsqueeze(0).to(device)
            # meta1 = meta1.unsqueeze(0).to(device)
            # meta2 = meta2.unsqueeze(0).to(device)
            # # print(inp.shape, target.shape, meta1.shape, meta2.shape)
            out = model(inp)
            # avg_correct_joint, n_joints, ncorrect = pckh.calc_for_deeppose(out, target, meta1, meta2)
            # print("PCKh: {:.4f}, n_joints: {}, n_correct: {}".format(avg_correct_joint, n_joints, ncorrect))
            img_list.append(img)
            pt_list.append(target.cpu())
            out_pt_list.append(out.cpu())

        mpii.plot_back_images(img_list, pt_list, cols=3)
        mpii.plot_back_images(img_list, out_pt_list, cols=3, color='blue')

main()
